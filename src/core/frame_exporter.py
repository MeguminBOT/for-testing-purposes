import os
from PIL.PngImagePlugin import PngInfo

# Import our own modules
from utils.utilities import Utilities

class FrameExporter:
    """
    Exports individual frames from a spritesheet as PNG images.

    Attributes:
        output_dir (str):
            Directory where exported frames will be saved.
        current_version (str):
            Version string to include in metadata.
        scale_image_func (callable):
            Function to scale images before saving.

    Methods:
        save_frames(image_tuples, kept_frame_indices, spritesheet_name, animation_name, scale, settings) -> int
            Saves selected frames as PNG files, applying cropping and scaling as specified in settings.
            Returns the number of frames successfully exported.
    """

    def __init__(self, output_dir, current_version, scale_image_func):
        self.output_dir = output_dir
        self.current_version = current_version
        self.scale_image = scale_image_func

    def save_frames(self, image_tuples, kept_frame_indices, spritesheet_name, animation_name, scale, settings):
        frames_generated = 0
        if len(image_tuples) == 0:
            return frames_generated

        frames_folder = os.path.join(self.output_dir, animation_name)
        os.makedirs(frames_folder, exist_ok=True)

        crop_option = settings.get('crop_option')

        if crop_option == "Animation based":
            min_x, min_y, max_x, max_y = float('inf'), float('inf'), 0, 0
            for index, frame in enumerate(image_tuples):
                if index in kept_frame_indices:
                    bbox = frame[1].getbbox()
                    if bbox:
                        min_x = min(min_x, bbox[0])
                        min_y = min(min_y, bbox[1])
                        max_x = max(max_x, bbox[2])
                        max_y = max(max_y, bbox[3])

            if min_x > max_x:
                return frames_generated

        for index, frame in enumerate(image_tuples):
            if index in kept_frame_indices:
                formatted_frame_name = Utilities.format_filename(
                    settings.get('prefix'),
                    spritesheet_name,
                    frame[0],
                    settings.get('filename_format'),
                    settings.get('replace_rules')
                )
                frame_filename = os.path.join(frames_folder, f"{formatted_frame_name}.png")
                frame_image = frame[1]

                bbox = frame_image.getbbox()
                if bbox:
                    if crop_option == "Frame based":
                        cropped_frame = frame_image.crop(bbox)
                        final_frame_image = self.scale_image(cropped_frame, scale)

                    elif crop_option == "Animation based":
                        cropped_frame = frame_image.crop((min_x, min_y, max_x, max_y))
                        final_frame_image = self.scale_image(cropped_frame, scale)

                    else:
                        final_frame_image = self.scale_image(frame_image, scale)

                    metadata = PngInfo()
                    metadata.add_text("Comment", f'PNG generated by TextureAtlas to GIF and Frames v{self.current_version}')

                    final_frame_image.save(frame_filename, pnginfo=metadata)
                    frames_generated += 1
                    print(f"Saved frame: {frame_filename}")
        return frames_generated
